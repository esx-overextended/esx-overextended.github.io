"use strict";(self.webpackChunkesx_overextended=self.webpackChunkesx_overextended||[]).push([[7851],{9613:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>c});var n=t(9496);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},b=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(t),b=l,c=u["".concat(s,".").concat(b)]||u[b]||d[b]||r;return t?n.createElement(c,o(o({ref:a},m),{},{components:t})):n.createElement(c,o({ref:a},m))}));function c(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=b;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},3087:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=t(1966),l=(t(9496),t(9613));const r={title:"Jobs",sidebar_label:"Functions"},o=void 0,i={unversionedId:"es_extended/Jobs/Server/functions",id:"es_extended/Jobs/Server/functions",title:"Jobs",description:"ESX.GetJob",source:"@site/docs/es_extended/Jobs/Server/functions.mdx",sourceDirName:"es_extended/Jobs/Server",slug:"/es_extended/Jobs/Server/functions",permalink:"/es_extended/Jobs/Server/functions",draft:!1,editUrl:"https://github.com/esx-overextended/esx-overextended.github.io/tree/main/docs/es_extended/Jobs/Server/functions.mdx",tags:[],version:"current",frontMatter:{title:"Jobs",sidebar_label:"Functions"},sidebar:"documentationSidebar",previous:{title:"Events",permalink:"/es_extended/Jobs/Server/events"},next:{title:"Overrides",permalink:"/es_extended/Overrides/"}},s={},p=[{value:"ESX.GetJob",id:"esxgetjob",level:2},{value:"ESX.GetJobs",id:"esxgetjobs",level:2},{value:"ESX.DoesJobExist",id:"esxdoesjobexist",level:2},{value:"ESX.GetPlayersByJobType",id:"esxgetplayersbyjobtype",level:2},{value:"ESX.RefreshJobs",id:"esxrefreshjobs",level:2},{value:"ESX.AddJob",id:"esxaddjob",level:2},{value:"ESX.UpdateJob",id:"esxupdatejob",level:2},{value:"ESX.RemoveJob",id:"esxremovejob",level:2}],m={toc:p},u="wrapper";function d(e){let{components:a,...t}=e;return(0,l.kt)(u,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"esxgetjob"},"ESX.GetJob"),(0,l.kt)("p",null,"Gets the job object data for the specified job name."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.GetJob(jobName)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobName: ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob?"))),(0,l.kt)("h2",{id:"esxgetjobs"},"ESX.GetJobs"),(0,l.kt)("p",null,"Gets all of the job objects data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.GetJobs()\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"<string, xJob>")," (array containing instances of xJob)")),(0,l.kt)("h2",{id:"esxdoesjobexist"},"ESX.DoesJobExist"),(0,l.kt)("p",null,"Checks if a job with the specified name and grade exist."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.DoesJobExist(jobName, jobGrade)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobName: ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"jobGrade: ",(0,l.kt)("inlineCode",{parentName:"li"},"number")),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,l.kt)("h2",{id:"esxgetplayersbyjobtype"},"ESX.GetPlayersByJobType"),(0,l.kt)("p",null,"Returns an array containing instances of all xPlayers with the specified job type and optionally job duty state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.GetPlayersByJobType(jobType, dutyState)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobType ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"dutyState? ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," (if it's not omitted, it will only return players with the specified duty state)"),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"xPlayer[]")," (array containing instances of xPlayers)"),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"integer")," (number of returned xPlayer instances)")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("h4",{parentName:"admonition",id:"example-usage"},"Example Usage"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'-- All on-duty players with "leo" job type\nlocal xPlayers, count = ESX.GetPlayersByJobType("leo", true)\n\nprint(("%s players with %s job type are on-duty"):format(count, "leo"))\n\nfor i = 1, count do\n    print(xPlayer.name)\nend\n'))),(0,l.kt)("h2",{id:"esxrefreshjobs"},"ESX.RefreshJobs"),(0,l.kt)("p",null,"Refreshes/Loads the job objects from database"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.RefreshJobs()\n")),(0,l.kt)("h2",{id:"esxaddjob"},"ESX.AddJob"),(0,l.kt)("p",null,"Adds a job or a table of jobs on runtime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.AddJob(jobObject)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobObject ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob[]")),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," (indicates whether the action was successful or not)"),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," (the execution message)")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("h4",{parentName:"admonition",id:"example-usage-1"},"Example Usage"),(0,l.kt)("h5",{parentName:"admonition",id:"adding-a-single-job"},"Adding a Single Job"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local job = {\n    name = "JOB_NAME",\n    label = "JOB_LABEL",\n    default_duty = true or false,\n    grades = {\n        ["0"] = {name = "trainee", label = "Trainee", salary = 100, skin_male = {}, skin_female = {}},\n        ["1"] = {name = "experienced", label = "Experienced", salary = 150, skin_male = {}, skin_female = {}},\n        ["2"] = {name = "boss", label = "Manager", salary = 200, skin_male = {}, skin_female = {}},\n    }\n}\n\nlocal resultState, resultMessage = ESX.AddJob(job)\nprint(resultState, resultMessage)\n')),(0,l.kt)("h5",{parentName:"admonition",id:"adding-multiple-jobs"},"Adding Multiple Jobs"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local jobs = {\n    {\n        name = "JOB_1_NAME",\n        label = "JOB_1_LABEL",\n        default_duty = true or false,\n        grades = {\n            ["0"] = {name = "trainee", label = "Trainee", salary = 100, skin_male = {}, skin_female = {}},\n            ["1"] = {name = "experienced", label = "Experienced", salary = 150, skin_male = {}, skin_female = {}},\n            ["2"] = {name = "boss", label = "Manager", salary = 200, skin_male = {}, skin_female = {}},\n        }\n    },\n    {\n        name = "JOB_2_NAME",\n        label = "JOB_2_LABEL",\n        default_duty = true or false,\n        grades = {\n            ["0"] = {name = "trainee", label = "Trainee", salary = 100, skin_male = {}, skin_female = {}},\n            ["1"] = {name = "experienced", label = "Experienced", salary = 150, skin_male = {}, skin_female = {}},\n            ["2"] = {name = "boss", label = "Manager", salary = 200, skin_male = {}, skin_female = {}},\n        }\n    }\n}\n\nlocal resultState, resultMessage = ESX.AddJob(jobs)\nprint(resultState, resultMessage)\n'))),(0,l.kt)("h2",{id:"esxupdatejob"},"ESX.UpdateJob"),(0,l.kt)("p",null,"Updates a job or a table of jobs on runtime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.UpdateJob(jobObject)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobObject ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob[]")),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," (indicates whether the action was successful or not)"),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," (the execution message)")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("h4",{parentName:"admonition",id:"example-usage-2"},"Example Usage"),(0,l.kt)("h5",{parentName:"admonition",id:"updating-a-single-job"},"Updating a Single Job"),(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"}," for optional attributes ",(0,l.kt)("inlineCode",{parentName:"em"},"?")," => if provided it will update it, and if not provided it will use the previously saved values","*"," ")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local job = {\n    name = "JOB_NAME", -- mandatory\n    label = "JOB_LABEL", -- optional\n    default_duty = true or false, -- optional\n    grades = { -- optional\n        ["0"] = {name? = "trainee", label? = "Trainee", salary? = 100, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n        ["1"] = {name? = "experienced", label? = "Experienced", salary? = 150, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n        ["2"] = {name? = "boss", label? = "Manager", salary? = 200, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n    }\n}\n\nlocal resultState, resultMessage = ESX.UpdateJob(job)\nprint(resultState, resultMessage)\n')),(0,l.kt)("h5",{parentName:"admonition",id:"updating-multiple-jobs"},"Updating Multiple Jobs"),(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("em",{parentName:"p"}," for optional attributes ",(0,l.kt)("inlineCode",{parentName:"em"},"?")," => if provided it will update it, and if not provided it will use the previously saved values","*"," ")),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local jobs = {\n    {\n        name = "JOB_1_NAME", -- mandatory\n        label = "JOB_1_LABEL", -- optional\n        default_duty = true or false, -- optional\n        grades = { -- optional\n            ["0"] = {name? = "trainee", label? = "Trainee", salary? = 100, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n            ["1"] = {name? = "experienced", label? = "Experienced", salary? = 150, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n            ["2"] = {name? = "boss", label? = "Manager", salary? = 200, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n        }\n    },\n    {\n        name = "JOB_2_NAME", -- mandatory\n        label = "JOB_2_LABEL", -- optional\n        default_duty = true or false, -- optional\n        grades = { -- optional\n            ["0"] = {name? = "trainee", label? = "Trainee", salary? = 100, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n            ["1"] = {name? = "experienced", label? = "Experienced", salary? = 150, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n            ["2"] = {name? = "boss", label? = "Manager", salary? = 200, skin_male? = {}, skin_female? = {}}, -- all of the attributes are optional\n        }\n    }\n}\n\nlocal resultState, resultMessage = ESX.UpdateJob(jobs)\nprint(resultState, resultMessage)\n'))),(0,l.kt)("h2",{id:"esxremovejob"},"ESX.RemoveJob"),(0,l.kt)("p",null,"Removes a job or a table of jobs on runtime"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.RemoveJob(jobObject)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"jobObject ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"xJob[]")),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," (indicates whether the action was successful or not)"),(0,l.kt)("li",{parentName:"ul"},"return ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," (the execution message)")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("h4",{parentName:"admonition",id:"example-usage-3"},"Example Usage"),(0,l.kt)("h5",{parentName:"admonition",id:"removing-a-single-job"},"Removing a Single Job"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local job = {\n    name = "JOB_NAME"\n}\n\nlocal resultState, resultMessage = ESX.RemoveJob(job)\nprint(resultState, resultMessage)\n')),(0,l.kt)("h5",{parentName:"admonition",id:"removing-multiple-jobs"},"Removing Multiple Jobs"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local jobs = {\n    {\n        name = "JOB_1_NAME"\n    },\n    {\n        name = "JOB_2_NAME"\n    }\n}\n\nlocal resultState, resultMessage = ESX.RemoveJob(jobs)\nprint(resultState, resultMessage)\n'))))}d.isMDXComponent=!0}}]);