"use strict";(self.webpackChunkesx_overextended=self.webpackChunkesx_overextended||[]).push([[6124],{9613:(e,t,l)=>{l.d(t,{Zo:()=>c,kt:()=>m});var n=l(9496);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(l),h=a,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||i;return l?n.createElement(m,r(r({ref:t},c),{},{components:l})):n.createElement(m,r({ref:t},c))}));function m(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=l.length,r=new Array(i);r[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var d=2;d<i;d++)r[d]=l[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}h.displayName="MDXCreateElement"},9539:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=l(1966),a=(l(9496),l(9613));const i={title:"Vehicle Methods",sidebar_label:"Methods"},r=void 0,o={unversionedId:"es_extended/Vehicle/Server/methods",id:"es_extended/Vehicle/Server/methods",title:"Vehicle Methods",description:"xVehicle.setCoords",source:"@site/docs/es_extended/Vehicle/Server/methods.mdx",sourceDirName:"es_extended/Vehicle/Server",slug:"/es_extended/Vehicle/Server/methods",permalink:"/es_extended/Vehicle/Server/methods",draft:!1,editUrl:"https://github.com/esx-overextended/esx-overextended.github.io/tree/main/docs/es_extended/Vehicle/Server/methods.mdx",tags:[],version:"current",frontMatter:{title:"Vehicle Methods",sidebar_label:"Methods"},sidebar:"documentationSidebar",previous:{title:"Functions",permalink:"/es_extended/Vehicle/Server/functions"},next:{title:"Properties",permalink:"/es_extended/Vehicle/Server/properties"}},s={},d=[{value:"xVehicle.setCoords",id:"xvehiclesetcoords",level:2},{value:"xVehicle.getCoords",id:"xvehiclegetcoords",level:2},{value:"xVehicle.set",id:"xvehicleset",level:2},{value:"xVehicle.get",id:"xvehicleget",level:2},{value:"xVehicle.setMetadata",id:"xvehiclesetmetadata",level:2},{value:"xVehicle.getMetadata",id:"xvehiclegetmetadata",level:2},{value:"xVehicle.delete",id:"xvehicledelete",level:2},{value:"xVehicle.setStored",id:"xvehiclesetstored",level:2},{value:"xVehicle.setOwner",id:"xvehiclesetowner",level:2},{value:"xVehicle.setGroup",id:"xvehiclesetgroup",level:2},{value:"xVehicle.setPlate",id:"xvehiclesetplate",level:2},{value:"xVehicle.setField",id:"xvehiclesetfield",level:2},{value:"xVehicle.setMethod",id:"xvehiclesetmethod",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...l}=e;return(0,a.kt)(u,(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"xvehiclesetcoords"},"xVehicle.setCoords"),(0,a.kt)("p",null,"Sets the vehicle's coordinates and heading."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setCoords(coords)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"coords: ",(0,a.kt)("inlineCode",{parentName:"li"},"table")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"vector3")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"vector4"))),(0,a.kt)("h2",{id:"xvehiclegetcoords"},"xVehicle.getCoords"),(0,a.kt)("p",null,"Gets the vehicle's coordinates and heading"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.getCoords(vector)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"vector?: ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (if true, it returns the vehicle coords as vector4, else it returns the coords as table)"),(0,a.kt)("li",{parentName:"ul"},"@return ",(0,a.kt)("inlineCode",{parentName:"li"},"vector4")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"table"))),(0,a.kt)("h2",{id:"xvehicleset"},"xVehicle.set"),(0,a.kt)("p",null,"Sets the vehicle's ",(0,a.kt)("strong",{parentName:"p"},"non-persistant")," data for key to the given value which will be removes on vehicle deletion. Similar to statebag data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.set(key, value)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"key: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")),(0,a.kt)("li",{parentName:"ul"},"value: ",(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h2",{id:"xvehicleget"},"xVehicle.get"),(0,a.kt)("p",null,"Gets a value from the vehicles's ",(0,a.kt)("strong",{parentName:"p"},"non-persistant")," data, or omit the argument to get all data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.get(key)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"key?: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," (if omitted, it returns all data)"),(0,a.kt)("li",{parentName:"ul"},"@return ",(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h2",{id:"xvehiclesetmetadata"},"xVehicle.setMetadata"),(0,a.kt)("p",null,"Sets the vehicle's ",(0,a.kt)("strong",{parentName:"p"},"persistant")," data for key to the given value which will be saved on vehicle deletion. Unlike statebag data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setMetadata(key, value, subValue)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"key: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")),(0,a.kt)("li",{parentName:"ul"},"value?: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"number")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"table")),(0,a.kt)("li",{parentName:"ul"},"subValue?: ",(0,a.kt)("inlineCode",{parentName:"li"},"any")),(0,a.kt)("li",{parentName:"ul"},"@return ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (indicating whether the action was successful or not)")),(0,a.kt)("h2",{id:"xvehiclegetmetadata"},"xVehicle.getMetadata"),(0,a.kt)("p",null,"Gets a value from the vehicles's ",(0,a.kt)("strong",{parentName:"p"},"persistant")," data, or omit the argument to get all data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.getMetadata(key, subKey)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"key?: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," (if omitted, it returns all data)"),(0,a.kt)("li",{parentName:"ul"},"subKey?: ",(0,a.kt)("inlineCode",{parentName:"li"},"any")),(0,a.kt)("li",{parentName:"ul"},"@return ",(0,a.kt)("inlineCode",{parentName:"li"},"any"))),(0,a.kt)("h2",{id:"xvehicledelete"},"xVehicle.delete"),(0,a.kt)("p",null,"Removes/despawns the vehicle from the game world, optionally removes its entry from database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.delete(removeFromDb)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"removeFromDb?: ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (delete the entry from database as well or no - defaults to ",(0,a.kt)("strong",{parentName:"li"},"false")," if omitted)")),(0,a.kt)("h2",{id:"xvehiclesetstored"},"xVehicle.setStored"),(0,a.kt)("p",null,"Updates the vehicle's ",(0,a.kt)("inlineCode",{parentName:"p"},"stored")," property and optionally despawns it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setStored(value, despawn)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"value?: ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")),(0,a.kt)("li",{parentName:"ul"},"despawn?: ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (remove the vehicle entity from the game world as well or no - defaults to ",(0,a.kt)("strong",{parentName:"li"},"false")," if omitted)")),(0,a.kt)("h2",{id:"xvehiclesetowner"},"xVehicle.setOwner"),(0,a.kt)("p",null,"Updates the vehicle's owner, matching a xPlayer's ",(0,a.kt)("inlineCode",{parentName:"p"},"identifier")," or nil to set it as unowned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setOwner(newOwner)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"newOwner?: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h2",{id:"xvehiclesetgroup"},"xVehicle.setGroup"),(0,a.kt)("p",null,"Updates the vehicle's group, which can be used for garage restrictions, unowned group vehicles, etc."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setGroup(newGroup)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"newGroup?: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h2",{id:"xvehiclesetplate"},"xVehicle.setPlate"),(0,a.kt)("p",null,"Sets the vehicle's plate, used in the database to ensure uniqueness. Does not necessarily match the vehicle's plate property (i.e. fake plates).",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("em",{parentName:"p"},"Plate is always formatted to ",(0,a.kt)("strong",{parentName:"em"},"8")," characters.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setPlate(newPlate)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"newPlate: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"))),(0,a.kt)("h2",{id:"xvehiclesetfield"},"xVehicle.setField"),(0,a.kt)("p",null,"Sets the value of the specified field for the xVehicle object. If a field with the same name already exist, its value will be overrided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setField(fieldName, value)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fieldName: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")),(0,a.kt)("li",{parentName:"ul"},"value: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"string")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"table")),(0,a.kt)("li",{parentName:"ul"},"return ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (whether the field registration was successful or not)")),(0,a.kt)("h2",{id:"xvehiclesetmethod"},"xVehicle.setMethod"),(0,a.kt)("p",null,"Adds a new method/function to the current xVehicle object. If a method with the same name already exist, it will be overrided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setMethod(fnName, fn)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fnName: ",(0,a.kt)("inlineCode",{parentName:"li"},"string")),(0,a.kt)("li",{parentName:"ul"},"fn: ",(0,a.kt)("inlineCode",{parentName:"li"},"function")),(0,a.kt)("li",{parentName:"ul"},"return ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean")," (whether the method registration was successful or not)")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h4",{parentName:"admonition",id:"example-using-xvehiclesetmethod-function"},"Example using ",(0,a.kt)("inlineCode",{parentName:"h4"},"xVehicle.setMethod")," function"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local xVehicle = ESX.GetVehicle(65535)\n\n-- registering a new method called "customCheck"\nxVehicle.setMethod("customCheck", function(self)\n    return function(firstParameter)\n        print(("This is xVehicle(%s)\'s \'customCheck\' method being triggered"):format(self.entity))\n        print(("The parameter passed in the \'customCheck\' method is \'%s\'"):format(firstParameter))\n    end\nend)\n\n-- reloading the xVehicle object after new method is registered\nxVehicle = ESX.GetVehicle(xVehicle.entity)\n\n-- calling the new registered method\nxVehicle.customCheck("hello from customCheck")\n')),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"p.s. In this way of registering a new method, ",(0,a.kt)("strong",{parentName:"em"},"only")," xVehicle object of vehicle(65535) will have the ",(0,a.kt)("inlineCode",{parentName:"em"},"customCheck")," method registered for it!")),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"could be useful in scenarios when you don't want to populate all vehicle objects with the new method."))))}p.isMDXComponent=!0}}]);