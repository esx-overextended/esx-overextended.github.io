"use strict";(self.webpackChunkesx_overextended=self.webpackChunkesx_overextended||[]).push([[6124],{9613:(e,t,l)=>{l.d(t,{Zo:()=>u,kt:()=>m});var a=l(9496);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function i(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):i(i({},t),e)),l},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(l),h=n,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return l?a.createElement(m,i(i({ref:t},u),{},{components:l})):a.createElement(m,i({ref:t},u))}));function m(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,i=new Array(r);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<r;c++)i[c]=l[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,l)}h.displayName="MDXCreateElement"},9539:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=l(1966),n=(l(9496),l(9613));const r={title:"Vehicle Methods",sidebar_label:"Methods"},i=void 0,o={unversionedId:"es_extended/Vehicle/Server/methods",id:"es_extended/Vehicle/Server/methods",title:"Vehicle Methods",description:"xVehicle.set",source:"@site/docs/es_extended/Vehicle/Server/methods.mdx",sourceDirName:"es_extended/Vehicle/Server",slug:"/es_extended/Vehicle/Server/methods",permalink:"/es_extended/Vehicle/Server/methods",draft:!1,editUrl:"https://github.com/esx-overextended/esx-overextended.github.io/tree/main/docs/es_extended/Vehicle/Server/methods.mdx",tags:[],version:"current",frontMatter:{title:"Vehicle Methods",sidebar_label:"Methods"},sidebar:"documentationSidebar",previous:{title:"Server",permalink:"/es_extended/Vehicle/Server/"},next:{title:"client",permalink:"/es_extended/Vehicle/client"}},s={},c=[{value:"xVehicle.set",id:"xvehicleset",level:2},{value:"xVehicle.get",id:"xvehicleget",level:2},{value:"xVehicle.setMetadata",id:"xvehiclesetmetadata",level:2},{value:"xVehicle.getMetadata",id:"xvehiclegetmetadata",level:2},{value:"xVehicle.delete",id:"xvehicledelete",level:2},{value:"xVehicle.setStored",id:"xvehiclesetstored",level:2},{value:"xVehicle.setOwner",id:"xvehiclesetowner",level:2},{value:"xVehicle.setGroup",id:"xvehiclesetgroup",level:2},{value:"xVehicle.setPlate",id:"xvehiclesetplate",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...l}=e;return(0,n.kt)(d,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"xvehicleset"},"xVehicle.set"),(0,n.kt)("p",null,"Sets the vehicle's ",(0,n.kt)("strong",{parentName:"p"},"non-persistant")," data for key to the given value which will be removes on vehicle deletion. Similar to statebag data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.set(key, value)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"key: ",(0,n.kt)("inlineCode",{parentName:"li"},"string")),(0,n.kt)("li",{parentName:"ul"},"value: ",(0,n.kt)("inlineCode",{parentName:"li"},"any"))),(0,n.kt)("h2",{id:"xvehicleget"},"xVehicle.get"),(0,n.kt)("p",null,"Gets a value from the vehicles's ",(0,n.kt)("strong",{parentName:"p"},"non-persistant")," data, or omit the argument to get all data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.get(key)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"key?: ",(0,n.kt)("inlineCode",{parentName:"li"},"string")," (if omitted, it returns all data)")),(0,n.kt)("h2",{id:"xvehiclesetmetadata"},"xVehicle.setMetadata"),(0,n.kt)("p",null,"Sets the vehicle's ",(0,n.kt)("strong",{parentName:"p"},"persistant")," data for key to the given value which will be saved on vehicle deletion. Unlike statebag data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setMetadata(key, value, subValue)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"key string"),(0,n.kt)("li",{parentName:"ul"},"value? string | number | table"),(0,n.kt)("li",{parentName:"ul"},"subValue? any"),(0,n.kt)("li",{parentName:"ul"},"@return boolean (indicating whether the action was successful or not)")),(0,n.kt)("h2",{id:"xvehiclegetmetadata"},"xVehicle.getMetadata"),(0,n.kt)("p",null,"Gets a value from the vehicles's ",(0,n.kt)("strong",{parentName:"p"},"persistant")," data, or omit the argument to get all data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.getMetadata(key, subKey)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"key?: ",(0,n.kt)("inlineCode",{parentName:"li"},"string")," (if omitted, it returns all data)"),(0,n.kt)("li",{parentName:"ul"},"subKey? any"),(0,n.kt)("li",{parentName:"ul"},"@return any")),(0,n.kt)("h2",{id:"xvehicledelete"},"xVehicle.delete"),(0,n.kt)("p",null,"Removes/despawns the vehicle from the game world, optionally removes its entry from database."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.delete(removeFromDb)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"removeFromDb? ",(0,n.kt)("inlineCode",{parentName:"li"},"boolean")," (delete the entry from database as well or no - defaults to ",(0,n.kt)("strong",{parentName:"li"},"false")," if omitted)")),(0,n.kt)("h2",{id:"xvehiclesetstored"},"xVehicle.setStored"),(0,n.kt)("p",null,"Updates the vehicle's ",(0,n.kt)("inlineCode",{parentName:"p"},"stored")," property and optionally despawns it."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setStored(value, despawn)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"value?: ",(0,n.kt)("inlineCode",{parentName:"li"},"boolean")),(0,n.kt)("li",{parentName:"ul"},"despawn?: ",(0,n.kt)("inlineCode",{parentName:"li"},"boolean")," (remove the vehicle entity from the game world as well or no - defaults to ",(0,n.kt)("strong",{parentName:"li"},"false")," if omitted)")),(0,n.kt)("h2",{id:"xvehiclesetowner"},"xVehicle.setOwner"),(0,n.kt)("p",null,"Updates the vehicle's owner, matching a xPlayer's ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier")," or nil to set it as unowned."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setOwner(newOwner)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"newOwner? string")),(0,n.kt)("h2",{id:"xvehiclesetgroup"},"xVehicle.setGroup"),(0,n.kt)("p",null,"Updates the vehicle's group, which can be used for garage restrictions, unowned group vehicles, etc."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setGroup(newGroup)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"newGroup? string")),(0,n.kt)("h2",{id:"xvehiclesetplate"},"xVehicle.setPlate"),(0,n.kt)("p",null,"Sets the vehicle's plate, used in the database to ensure uniqueness. Does not necessarily match the vehicle's plate property (i.e. fake plates).",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("em",{parentName:"p"},"Plate is always formatted to ",(0,n.kt)("strong",{parentName:"em"},"8")," characters.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"xVehicle.setPlate(newPlate)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"newPlate: ",(0,n.kt)("inlineCode",{parentName:"li"},"string"))))}p.isMDXComponent=!0}}]);